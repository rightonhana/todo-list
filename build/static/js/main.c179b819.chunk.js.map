{"version":3,"sources":["components/Item/Item.module.css","components/AddItem/AddItem.module.css","App.module.css","components/Items/Items.module.css","components/List/List.module.css","features/todoSlice.ts","components/AddItem/AddItem.tsx","components/Item/Item.tsx","components/Items/Items.tsx","components/List/List.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["module","exports","todoSlice","createSlice","name","initialState","reducers","addTodo","state","payload","value","setDone","map","item","id","done","deleteTodo","filter","actions","selectTodoList","todos","AddItem","props","useState","input","setInput","dispatch","useDispatch","className","styles","Form","onSubmit","event","preventDefault","Date","now","TextField","Input","onChange","target","label","variant","Button","type","color","Item","Card","TodoCard","TaskInfo","Checkbox","checked","inputProps","Done","TaskValue","Delete","onClick","Items","items","TodoList","index","List","todoList","useSelector","TodoApp","App","store","configureStore","reducer","todoReducer","preloadedState","todoState","localStorage","getItem","JSON","parse","error","loadState","subscribe","stringify","setItem","console","log","saveState","getState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"gGACAA,EAAOC,QAAU,CAAC,KAAO,mBAAmB,SAAW,uBAAuB,SAAW,uBAAuB,KAAO,mBAAmB,UAAY,wBAAwB,OAAS,uB,mBCAvLD,EAAOC,QAAU,CAAC,KAAO,sBAAsB,MAAQ,uBAAuB,OAAS,0B,mBCAvFD,EAAOC,QAAU,CAAC,IAAM,mB,mBCAxBD,EAAOC,QAAU,CAAC,SAAW,0B,mBCA7BD,EAAOC,QAAU,CAAC,QAAU,wB,mLCKtBC,EAAYC,YAAY,CAC7BC,KAAM,QACNC,aAJgC,GAKhCC,SAAU,CACTC,QAAS,SAACC,EAAD,OAAUC,EAAV,EAAUA,QAAV,MAAmE,KAAlBA,EAAQC,MAAR,sBACtDF,GADsD,CAEzDC,IACGD,GACJG,QAAS,SAACH,EAAD,OAAUC,EAAV,EAAUA,QAAV,OAAwBD,EAAMI,KAAI,SAAAC,GAAI,OAAIJ,IAAYI,EAAKC,GAAjB,2BAA0BD,GAA1B,IAAgCE,MAAOF,EAAKE,OAAQF,MACvGG,WAAY,SAACR,EAAD,OAAUC,EAAV,EAAUA,QAAV,OAAwBD,EAAMS,QAAO,SAAAJ,GAAI,OAAIJ,IAAYI,EAAKC,UAIrE,EAAyCZ,EAAUgB,QAA3CX,EAAR,EAAQA,QAASI,EAAjB,EAAiBA,QAASK,EAA1B,EAA0BA,WAEpBG,EAAiB,SAACX,GAAD,OAAsBA,EAAMY,OAE3ClB,IAAf,Q,wBCQemB,EAxBgB,SAAC,GAAkB,IAAbC,EAAY,oBAChD,EAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACMC,EAAWC,cAcjB,OACC,+CAAMC,UAAWC,IAAOC,KAAMC,SAbd,SAACC,GACjBA,EAAMC,iBACNP,EACCnB,EAAQ,CACPG,MAAOc,EACPT,MAAM,EACND,GAAIoB,KAAKC,SAGXV,EAAS,MAI6CH,GAAtD,cACC,cAACc,EAAA,EAAD,CAAWR,UAAWC,IAAOQ,MAAO3B,MAAOc,EAAOc,SAAU,SAACN,GAAD,OAAWP,EAASO,EAAMO,OAAO7B,QAAQ8B,MAAM,OAAOC,QAAQ,aAC1H,cAACC,EAAA,EAAD,CAAQd,UAAWC,IAAOa,OAAQD,QAAQ,YAAYE,KAAK,SAASC,MAAM,UAA1E,4B,mCCeYC,EAhCoB,SAAC,GAAyB,IAAvBnC,EAAsB,EAAtBA,MAAOK,EAAe,EAAfA,KAAMD,EAAS,EAATA,GAC5CY,EAAWC,cAYjB,OACC,oBAAIC,UAAWC,IAAOgB,KAAtB,SACC,eAACC,EAAA,EAAD,CAAMF,MAAM,QAAQhB,UAAWC,IAAOkB,SAAtC,UACC,uBAAMnB,UAAWC,IAAOmB,SAAxB,UACC,cAACC,EAAA,EAAD,CACCC,QAASnC,EACTuB,SAfe,WACnBZ,EAASf,EAAQG,KAebqC,WAAY,CAAE,aAAc,oBAC5BP,MAAM,YAEP,mBAAGhB,UAAWb,EAAOc,IAAOuB,KAAOvB,IAAOwB,UAA1C,SAAsD3C,OAEvD,cAACgC,EAAA,EAAD,CAAQd,UAAWC,IAAOyB,OAAQb,QAAQ,YAAYc,QAjBpC,SAACvB,GACrBA,EAAMC,iBACNP,EAASV,EAAWF,KAelB,wB,iBCfW0C,EAdsB,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACpC,oBAAI7B,UAAWC,IAAO6B,SAAtB,SACED,EAAM7C,KAAI,SAACC,EAAM8C,GAAP,OACV,cAAC,EAAD,CAECjD,MAAOG,EAAKH,MACZK,KAAMF,EAAKE,KACXD,GAAID,EAAKC,IAHJ6C,S,iBCUMC,EAXa,SAAC,GAAgB,IAAZtC,EAAW,oBACrCuC,EAAWC,YAAY3C,GAE7B,OACC,eAAC2B,EAAA,EAAD,yBAAMlB,UAAWC,IAAOkC,SAAazC,GAArC,cACC,cAAC,EAAD,CAAOmC,MAAOI,IACd,cAAC,EAAD,SCLYG,EANH,kBACX,qBAAKpC,UAAWC,IAAOmC,IAAvB,SACC,cAAC,EAAD,OCoBWC,EAAQC,YAAe,CACnCC,QAAS,CACR/C,MAAOgD,GAERC,eAzBwB,WACxB,IACC,IAAMC,EAAYC,aAAaC,QAAQ,YACvC,GAAkB,OAAdF,EACH,OAED,OAAOG,KAAKC,MAAMJ,GACjB,MAAOK,GACR,QAiBeC,KAGjBX,EAAMY,WAAU,kBAhBS,SAACrE,GACzB,IACC,IAAM8D,EAAYG,KAAKK,UAAUtE,GACjC+D,aAAaQ,QAAQ,WAAYT,GAChC,MAAMK,GACPK,QAAQC,IAAIN,IAWQO,CAAUjB,EAAMkB,eCpBlBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAU1B,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJ2B,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACzB,GACNK,QAAQL,MAAMA,EAAM0B,c","file":"static/js/main.c179b819.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Item\":\"Item_Item__317LJ\",\"TodoCard\":\"Item_TodoCard__32CAz\",\"TaskInfo\":\"Item_TaskInfo__2oA6J\",\"Done\":\"Item_Done__19Uvk\",\"TaskValue\":\"Item_TaskValue__3mapw\",\"Delete\":\"Item_Delete__1AtAR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Form\":\"AddItem_Form__17Xuz\",\"Input\":\"AddItem_Input__2tZUW\",\"Button\":\"AddItem_Button__21iOX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__16ZpL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TodoList\":\"Items_TodoList__2AbG4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TodoApp\":\"List_TodoApp__2_F3z\"};","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { RootState } from '../app/store';\nimport TodoItem from \"../types/TodoItem\";\n\nconst initialState: TodoItem[] = []\n\nconst todoSlice = createSlice({\n\tname: \"todos\",\n\tinitialState,\n\treducers: {\n\t\taddTodo: (state, { payload }: PayloadAction<TodoItem>) => payload.value !== \"\" ? [\n\t\t\t...state,\n\t\t\tpayload\n\t\t] : state,\n\t\tsetDone: (state, { payload }) => state.map(item => payload === item.id ? {...item, done: !item.done} : item),\n\t\tdeleteTodo: (state, { payload }) => state.filter(item => payload !== item.id)\n\t}\n});\n\nexport const { addTodo, setDone, deleteTodo } = todoSlice.actions;\n\nexport const selectTodoList = (state: RootState) => state.todos;\n\nexport default todoSlice.reducer;","import Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { FC, FormEvent, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { addTodo } from \"../../features/todoSlice\";\nimport styles from \"./AddItem.module.css\";\n\nexport const AddItem: FC<{}> = ({ ...props }) => {\n\tconst [input, setInput] = useState(\"\");\n\tconst dispatch = useDispatch();\n\n\tconst onSubmit = (event: FormEvent<HTMLFormElement>) => {\n\t\tevent.preventDefault();\n\t\tdispatch(\n\t\t\taddTodo({\n\t\t\t\tvalue: input,\n\t\t\t\tdone: false,\n\t\t\t\tid: Date.now()\n\t\t\t})\n\t\t);\n\t\tsetInput(\"\");\n\t};\n\n\treturn (\n\t\t<form className={styles.Form} onSubmit={onSubmit} {...props}> \n\t\t\t<TextField className={styles.Input} value={input} onChange={(event) => setInput(event.target.value)} label=\"Task\" variant=\"outlined\" />\n\t\t\t<Button className={styles.Button} variant=\"contained\" type=\"submit\" color=\"primary\">Add to-do</Button>\n\t\t</form> \n\t);\n};\n\nexport default AddItem;","import { FC, MouseEvent } from \"react\";\nimport ItemProps from \"./ItemProps\";\nimport styles from \"./Item.module.css\";\nimport { useDispatch } from \"react-redux\";\nimport { setDone, deleteTodo } from  \"../../features/todoSlice\";\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Button from \"@material-ui/core/Button\";\nimport Card from '@material-ui/core/Card';\n\nexport const Item: FC<ItemProps> = ({ value, done, id }) => {\n\tconst dispatch = useDispatch();\n\n\n\tconst handleCheck = () => {\n\t\tdispatch(setDone(id));\n\t}\n\n\tconst handleDelete = (event: MouseEvent) => {\n\t\tevent.preventDefault();\n\t\tdispatch(deleteTodo(id));\n\t}\n\t\n\treturn (\n\t\t<li className={styles.Item}>\n\t\t\t<Card color=\"black\" className={styles.TodoCard}>\n\t\t\t\t<span className={styles.TaskInfo}>\n\t\t\t\t\t<Checkbox\n\t\t\t\t\t\tchecked={done}\n\t\t\t\t\t\tonChange={handleCheck}\n\t\t\t\t\t\tinputProps={{ 'aria-label': 'primary checkbox' }}\n\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t/>\n\t\t\t\t\t<p className={done ? styles.Done : styles.TaskValue}>{value}</p>\n\t\t\t\t</span>\n\t\t\t\t<Button className={styles.Delete} variant=\"contained\" onClick={handleDelete}>&times;</Button>\n    \t\t</Card>\n\t\t\t\n\t\t</li>\n\t);\n}\n\nexport default Item;","import { FC } from \"react\";\nimport Item from \"../Item/Item\";\nimport ItemsProps from \"./ItemsProps\";\nimport styles from \"./Items.module.css\";\n\nexport const Items: FC<ItemsProps> = ({ items }) => (\n\t<ul className={styles.TodoList}>\n\t\t{items.map((item, index) => (\n\t\t\t<Item\n\t\t\t\tkey={index}\n\t\t\t\tvalue={item.value}\n\t\t\t\tdone={item.done}\n\t\t\t\tid={item.id}\n\t\t\t/>\n\t\t))}\n\t</ul>\n);\n//{...item}\n\nexport default Items;","import { FC } from \"react\";\nimport AddItem from \"../AddItem\";\nimport Items from \"../Items\";\nimport { useSelector } from \"react-redux\";\nimport { selectTodoList } from \"../../features/todoSlice\";\nimport styles from \"./List.module.css\";\nimport Card from '@material-ui/core/Card';\n\nexport const List: FC<{}> = ({...props}) => {\n\tconst todoList = useSelector(selectTodoList);\n\n\treturn (\n\t\t<Card className={styles.TodoApp} {...props}>\n\t\t\t<Items items={todoList}/>\n\t\t\t<AddItem/>\n\t\t</Card>\n\t);\n}\n\nexport default List;","import styles from \"./App.module.css\";\nimport List from './components/List';\n\nconst App = () => (\n\t<div className={styles.App}>\n\t\t<List/>\n\t</div>\n);\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport todoReducer from '../features/todoSlice';\nimport TodoItem from '../types/TodoItem';\n\nexport const loadState = () => {\n\ttry {\n\t\tconst todoState = localStorage.getItem('appState');\n\t\tif (todoState === null) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn JSON.parse(todoState);\n\t} catch (error) {\n\t\treturn undefined;\n\t}\n};\n\nexport const saveState = (state: { todos: TodoItem[]}) => {\n\ttry {\n\t\tconst todoState = JSON.stringify(state);\n\t\tlocalStorage.setItem('appState', todoState);\n\t} catch(error) {\n\t\tconsole.log(error);\n\t}\n};\n\nexport const store = configureStore({\n\treducer: {\n\t\ttodos: todoReducer,\n\t},\n\tpreloadedState: loadState()\n});\n\nstore.subscribe(() => saveState(store.getState()));\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n\tReturnType,\n\tRootState,\n\tunknown,\n\tAction<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}